import argparse
import json
import numpy as np
import rasterio
from pathlib import Path
import time
from batch_manager import BatchManager
from polygon_utils import load_geojson_polygon, create_polygon_mask
from shared import interpolation_core, data_generator

def main():
    parser = argparse.ArgumentParser(
        description="–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –æ—Å–∞–¥–∫–æ–≤"
    )
    
    parser.add_argument("--region-json", required=True, help="JSON —Ñ–∞–π–ª —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —Ä–µ–≥–∏–æ–Ω–∞")
    parser.add_argument("--output-tif", required=True, help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è GeoTIFF")
    parser.add_argument("--stations", type=int, default=80, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω—Ü–∏–π")
    parser.add_argument("--resolution", type=float, default=0.01, help="–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–∞—Å—Ç—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö")
    parser.add_argument("--power", type=float, default=2.0, help="–°—Ç–µ–ø–µ–Ω—å –¥–ª—è IDW –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏")
    parser.add_argument("--polygon-geojson", help="GeoJSON —Å –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–º –ø–æ–ª–∏–≥–æ–Ω–æ–º")
    parser.add_argument("--servers", nargs='+', required=True, 
                       help="URL —Å–µ—Ä–≤–µ—Ä–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: http://192.168.1.100:5000")
    parser.add_argument("--batch-size", type=int, default=20, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –±–∞—Ç—á–µ")
    
    args = parser.parse_args()
    
    print("üöÄ –ö–õ–ò–ï–ù–¢ –î–õ–Ø –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ù–´–• –í–´–ß–ò–°–õ–ï–ù–ò–ô")
    print("=" * 50)
    print(f"–°–µ—Ä–≤–µ—Ä—ã: {args.servers}")
    print(f"–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {args.batch_size} —Å—Ç—Ä–æ–∫")
    start_time = time.time()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞
    try:
        with open(args.region_json, 'r') as f:
            region_bounds = json.load(f)
        print(f"‚úì –†–µ–≥–∏–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {region_bounds['name']}")
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
        return
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    csv_path = "massachusetts_precipitation_data.csv"
    try:
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        data_generator.generate_precipitation_data(region_bounds, args.stations, csv_path)
        print(f"‚úì –î–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {csv_path}")
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        known_data = interpolation_core.load_known_data(csv_path)
        print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(known_data['lons'])} —Å—Ç–∞–Ω—Ü–∏–π")
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π: {e}")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏
    try:
        lons_grid, lats_grid, transform = interpolation_core.create_grid(
            region_bounds, args.resolution
        )
        height, width = lons_grid.shape
        print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Ç–∫–∞: {height} x {width} –ø–∏–∫—Å–µ–ª–µ–π")
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏: {e}")
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–∏–≥–æ–Ω–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    polygon_mask = None
    if args.polygon_geojson:
        try:
            print("üî∑ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–µ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞...")
            polygon = load_geojson_polygon(args.polygon_geojson)
            polygon_mask = create_polygon_mask(polygon, transform, width, height)
            pixels_inside = np.sum(polygon_mask)
            print(f"‚úì –ü–æ–ª–∏–≥–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {pixels_inside} –ø–∏–∫—Å–µ–ª–µ–π –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–∏–≥–æ–Ω–∞ ({pixels_inside/(height*width)*100:.1f}%)")
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–∏–≥–æ–Ω–∞: {e}")
            return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞—Ç—á–µ–π
    print("üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞—Ç—á–µ–π...")
    batches = []
    for start_row in range(0, height, args.batch_size):
        end_row = min(start_row + args.batch_size, height)
        
        batch_data = {
            'start_row': start_row,
            'end_row': end_row,
            'lons_grid': lons_grid[start_row:end_row],
            'lats_grid': lats_grid[start_row:end_row],
            'known_data': known_data,
            'power': args.power,
            'polygon_mask': polygon_mask[start_row:end_row] if polygon_mask is not None else None
        }
        batches.append(batch_data)
    
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {len(batches)} –±–∞—Ç—á–µ–π")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞—Ç—á–µ–π –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º
    print("üåê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π...")
    try:
        batch_manager = BatchManager(args.servers)
        results = batch_manager.distribute_batches(batches, max_workers=len(args.servers))
        
        if not results:
            print("‚úó –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤")
            return
            
        print(f"‚úì –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}/{len(batches)} –±–∞—Ç—á–µ–π")
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–∞—Ç—á–µ–π: {e}")
        return
    
    # –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("üîÑ –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    result_array = np.full((height, width, 2), np.nan, dtype=np.float32)
    
    successful_batches = 0
    for start_row, batch_results in results.items():
        if batch_results is not None:
            batch_size = batch_results.shape[0]
            result_array[start_row:start_row + batch_size] = batch_results
            successful_batches += 1
    
    print(f"‚úì –°–æ–±—Ä–∞–Ω–æ {successful_batches} –±–∞—Ç—á–µ–π")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    try:
        output_path = Path(args.output_tif)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        profile = {
            'driver': 'GTiff',
            'height': height,
            'width': width,
            'count': 2,
            'dtype': np.float32,
            'crs': 'EPSG:4326',
            'transform': transform,
            'compress': 'lzw',
            'nodata': np.nan
        }
        
        with rasterio.open(str(output_path), 'w', **profile) as dst:
            dst.write(result_array[:, :, 0], 1)
            dst.write(result_array[:, :, 1], 2)
            dst.set_band_description(1, "Maximum precipitation")
            dst.set_band_description(2, "Mean precipitation (non-zero)")
        
        print(f"‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    total_time = time.time() - start_time
    print("=" * 50)
    print("‚úÖ –í–´–ß–ò–°–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –£—Å–ø–µ—à–Ω—ã—Ö –±–∞—Ç—á–µ–π: {successful_batches}/{len(batches)}")
    print(f"üåê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(args.servers)}")

if __name__ == '__main__':
    main()