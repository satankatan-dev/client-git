import requests
import numpy as np
import json
from concurrent.futures import ThreadPoolExecutor, as_completed
import time

class BatchManager:
    def __init__(self, server_urls):
        self.server_urls = server_urls
        self.current_server = 0
        self.completed_batches = 0
        self.total_batches = 0
    
    def get_next_server(self):
        """Round-robin —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º"""
        server = self.server_urls[self.current_server]
        self.current_server = (self.current_server + 1) % len(self.server_urls)
        return server
    
    def check_server_health(self, server_url):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = requests.get(f"{server_url}/health", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def send_batch_to_server(self, batch_data, server_url):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞—Ç—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            serializable_data = {
                'start_row': batch_data['start_row'],
                'end_row': batch_data['end_row'],
                'lons_grid': batch_data['lons_grid'].tolist(),
                'lats_grid': batch_data['lats_grid'].tolist(), 
                'known_data': {
                    'lons': batch_data['known_data']['lons'].tolist(),
                    'lats': batch_data['known_data']['lats'].tolist(),
                    'max_values': batch_data['known_data']['max_values'].tolist(),
                    'mean_values': batch_data['known_data']['mean_values'].tolist()
                },
                'power': batch_data['power'],
                'polygon_mask': batch_data.get('polygon_mask', None)
            }
            
            if serializable_data['polygon_mask'] is not None:
                serializable_data['polygon_mask'] = serializable_data['polygon_mask'].tolist()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            start_time = time.time()
            response = requests.post(
                f"{server_url}/process_batch",
                json=serializable_data,
                timeout=3600  # 1 —á–∞—Å —Ç–∞–π–º–∞—É—Ç
            )
            processing_time = time.time() - start_time
            
            if response.status_code == 200:
                result = response.json()
                self.completed_batches += 1
                print(f"‚úÖ [{self.completed_batches}/{self.total_batches}] {server_url}: —Å—Ç—Ä–æ–∫–∏ {batch_data['start_row']}-{batch_data['end_row']} ({processing_time:.1f}—Å)")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ numpy
                results_array = np.array(result['results'], dtype=np.float32)
                return result['start_row'], results_array
            else:
                print(f"‚ùå {server_url}: –û—à–∏–±–∫–∞ {response.status_code} - {response.text}")
                return None
                
        except requests.exceptions.Timeout:
            print(f"‚è∞ {server_url}: –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞")
            return None
        except requests.exceptions.ConnectionError:
            print(f"üîå {server_url}: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            return None
        except Exception as e:
            print(f"üí• {server_url}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None
    
    def distribute_batches(self, batches_data, max_workers=None):
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞—Ç—á–∏ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        self.total_batches = len(batches_data)
        self.completed_batches = 0
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        available_servers = []
        for server_url in self.server_urls:
            if self.check_server_health(server_url):
                available_servers.append(server_url)
                print(f"   ‚úì {server_url} - –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"   ‚úó {server_url} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        if not available_servers:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤!")
            return {}
        
        self.server_urls = available_servers
        print(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {len(available_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        results = {}
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞—Ç—á–µ–π
        with ThreadPoolExecutor(max_workers=max_workers or len(available_servers)) as executor:
            future_to_batch = {}
            
            for batch_data in batches_data:
                server_url = self.get_next_server()
                future = executor.submit(self.send_batch_to_server, batch_data, server_url)
                future_to_batch[future] = batch_data['start_row']
            
            # –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for future in as_completed(future_to_batch):
                start_row = future_to_batch[future]
                try:
                    result = future.result()
                    if result:
                        results[start_row] = result[1]
                except Exception as e:
                    print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫ {start_row}: {e}")
        
        return results